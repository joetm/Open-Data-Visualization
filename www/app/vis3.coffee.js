// Generated by CoffeeScript 1.9.1

/*global document, $, d3, Slick, window */

(function() {
  var parcoords;

  parcoords = d3.parcoords()('#projects').alpha(0.4).mode('queue').height(d3.max([document.body.clientHeight - 326, 220])).margin({
    top: 36,
    left: 260,
    right: 0,
    bottom: 16
  });

  d3.csv('vis3/data/projects.csv?' + String(Math.floor((new Date).getTime() / 1000)), function(data) {
    var column_keys, columns, comparer, dataView, grid, gridUpdate, options, pager, sortcol, sortdir;
    comparer = function(a, b) {
      var x, y;
      x = a[sortcol];
      y = b[sortcol];
      if (x === y) {
        return 0;
      } else if (x > y) {
        return 1;
      } else {
        return -1;
      }
    };
    gridUpdate = function(data) {
      dataView.beginUpdate();
      dataView.setItems(data);
      dataView.endUpdate();
    };
    'use strict';
    data.forEach(function(d, i) {
      d.id = d.id || i;
    });
    parcoords.data(data).hideAxis(['Unique Investment Identifier', 'Business Case ID', 'Agency Code', 'Investment Title', 'Project ID', 'Agency Project ID', 'Project Name', 'Project Description', 'Start Date', 'Completion Date (B1)', 'Planned Project Completion Date (B2)', 'Projected/Actual Project Completion Date (B2)', 'Updated Date', 'Updated Time', 'Unique Project ID', 'id']).render().reorderable().brushMode('1D-axes');
    $('body').css('background-image', 'none');
    column_keys = d3.keys(data[0]);
    sortdir = 1;
    sortcol = void 0;
    columns = column_keys.map(function(key, i) {
      return {
        id: key,
        name: key,
        field: key,
        sortable: true
      };
    });
    options = {
      enableCellNavigation: true,
      enableColumnReorder: false,
      multiColumnSort: false
    };
    dataView = new Slick.Data.DataView;
    grid = new Slick.Grid('#grid', dataView, columns, options);
    pager = new Slick.Controls.Pager(dataView, grid, $('#pager'));
    dataView.onRowCountChanged.subscribe(function(e, args) {
      grid.updateRowCount();
      grid.render();
    });
    dataView.onRowsChanged.subscribe(function(e, args) {
      grid.invalidateRows(args.rows);
      grid.render();
    });
    sortcol = column_keys[0];
    grid.onSort.subscribe(function(e, args) {
      sortdir = args.sortAsc ? 1 : -1;
      sortcol = args.sortCol.field;
      if ($.browser.msie && $.browser.version <= 8) {
        dataView.fastSort(sortcol, args.sortAsc);
      } else {
        dataView.sort(comparer, args.sortAsc);
      }
    });
    grid.onMouseEnter.subscribe(function(e, args) {
      var d, i;
      i = grid.getCellFromEvent(e).row;
      d = parcoords.brushed() || data;
      parcoords.highlight([d[i]]);
    });
    grid.onMouseLeave.subscribe(function(e, args) {
      parcoords.unhighlight();
    });
    gridUpdate(data);
    parcoords.on('brush', function(d) {
      gridUpdate(d);
    });
    $('#pager').prepend('<div id="ip-warning" style="font-size:0.8rem;margin:0.5rem;position:absolute;left:37%;">' + 'adapted from ' + '<a href="https://syntagmatic.github.io/parallel-coordinates/examples/slickgrid.html"' + 'target="_blank">' + 'Parallel Coords: Progressive Rendering and SlickGrid</a></div>');
  });

}).call(this);
